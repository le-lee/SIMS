###第一行为设置 格式为： 日志级别（DEBUG < INFO < WARN < ERROR < FATAL）,后面接自己定义的appender
### 设置日志级别为DEBUG###
#log4j.rootLogger = DEBUG, console, D, I, E ,database
log4j.rootLogger = DEBUG, console, D, I, E
### 输出到控制台 ###
log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern = [%-5p] %d{ yyyy-MM-dd HH:mm:ss} - %m%n

### 输出DEBUG 级别以上的日志到=E://logs/debug.log###  
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.D.File = E://logs/debug.log  
log4j.appender.D.Append = true  
log4j.appender.D.Threshold = DEBUG   
log4j.appender.D.layout = org.apache.log4j.PatternLayout  
log4j.appender.D.layout.ConversionPattern = [%-5p] %d{ yyyy-MM-dd HH:mm:ss} - %m%n  

### 输出INFO 级别以上的日志到=E://logs/info.log ###  
log4j.appender.I = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.I.File =E\://logs/info.log   
log4j.appender.I.Append = true  
log4j.appender.I.Threshold = INFO   
log4j.appender.I.layout = org.apache.log4j.PatternLayout  
log4j.appender.I.layout.ConversionPattern = [%-5p] %d{ yyyy-MM-dd HH:mm:ss} - %m%n   

### 输出ERROR 级别以上的日志到=E://logs/error.log ###  
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.E.File =E\://logs/error.log   
log4j.appender.E.Append = true  
log4j.appender.E.Threshold = ERROR   
log4j.appender.E.layout = org.apache.log4j.PatternLayout  
log4j.appender.E.layout.ConversionPattern = [%-5p] %d{ yyyy-MM-dd HH:mm:ss} - %m%n   
  

#日志写入数据库设置 
#log4j.appender.database=org.apache.log4j.jdbc.JDBCAppender  
#与数据库建立连接  
#log4j.appender.database.URL=jdbc:mysql://localhost:3306/grade_management
#log4j.appender.database.driver=com.mysql.jdbc.Driver  
#log4j.appender.database.user=sa  
#log4j.appender.database.password=123456 
#指定要插入数据库的格式，具体参数的格式看一开始给出的文档  
#log4j.appender.DATABASE.sql=INSERT INTO log (log_date, log_level, location, message) VALUES ('%d{yyyy-MM-dd HH:mm:ss}', '%p', '%C,%L', '%m')  

#没有当日志目录文件时，Log4j会创建文件，即使当前日志级别达不到该文件写入日志的级别

#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%t 输出产生该日志事件的线程名；
#%n 输出一个回车换行符,Windows平台为"\r\n",Unix平台为"\n"
#%d 输出日志时间的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
#比如：%d{yyy MMM dd HH:mm:ss,SSS},输出类似：2008年10月18日22：10：28：832
#%c 输出所属的类目，通常就是所在类的全名，如“iNotes.Default”；
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#%L 输出代码中的行数;
#%F 输出代码中的文件名;  


